<div class="page-body">
    <div class="container-fluid">
        <div class="row pb-sm-4 pt-sm-4">
            <div class="col-lg-12 mb-3">
                <div class="card">
                    <div class="card-body d-flex align-items-center">
                        <div class="avatar-lg me-3">
                            <span class="avatar-title rounded-circle bg-soft-primary text-primary fs-1">
                                <i class="fas fa-user-graduate"></i>
                            </span>
                        </div>
                        <div>
                            <h2 class="mb-1">Xin ch√†o, {{user.name}} üëã</h2>
                            <p class="text-muted mb-0">B·∫°n ƒë√£ s·∫µn s√†ng l√™n k·∫ø ho·∫°ch h·ªçc t·∫≠p tu·∫ßn n√†y ch∆∞a?</p>
                        </div>
                        <div class="ms-auto">
                            <a href="/calendar" class="btn btn-primary" id="addStudySessionBtn">
                                <i class="fas fa-plus me-1"></i> Th√™m bu·ªïi h·ªçc
                            </a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-12 mb-3">
                <div class="card">
                    <div class="card-header custom-border-bottom">
                        <h5 class="card-title mb-0">Truy c·∫≠p nhanh</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3 mb-3 mb-md-0">
                                <a href="/ai-chat" class="btn btn-primary w-100 py-2">
                                    <i class="fas fa-comments me-2"></i> Tr√≤ chuy·ªán v·ªõi AI
                                </a>
                            </div>
                            <div class="col-md-3 mb-3 mb-md-0">
                                <a href="/calendar" class="btn btn-info w-100 py-2">
                                    <i class="fas fa-calendar me-2"></i> Qu·∫£n l√Ω l·ªãch h·ªçc
                                </a>
                            </div>
                            <div class="col-md-3 mb-3 mb-md-0">
                                <a href="/discussion" class="btn btn-success w-100 py-2">
                                    <i class="fas fa-comments-alt me-2"></i> Th·∫£o lu·∫≠n
                                </a>
                            </div>
                            <div class="col-md-3">
                                <a href="/settings" class="btn btn-secondary w-100 py-2">
                                    <i class="fas fa-cog me-2"></i> C√†i ƒë·∫∑t
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-7 mb-3">
                <div class="card h-100">
                    <div class="card-header custom-border-bottom d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">L·ªãch h·ªçc tu·∫ßn n√†y</h5>
                        <div>
                            <button class="btn btn-sm btn-outline-secondary me-2" id="prevWeekBtn">
                                <i class="fas fa-chevron-left"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-secondary" id="nextWeekBtn">
                                <i class="fas fa-chevron-right"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <tbody id="weeklySchedule">
                                    <tr id="loadingSchedule">
                                        <td colspan="2" class="text-center py-3">
                                            <div class="spinner-border spinner-border-sm text-primary" role="status">
                                                <span class="visually-hidden">ƒêang t·∫£i...</span>
                                            </div>
                                            <span class="ms-2">ƒêang t·∫£i l·ªãch h·ªçc...</span>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="card-footer bg-transparent">
                        <a href="/calendar" class="btn btn-sm btn-link text-primary">Xem l·ªãch ƒë·∫ßy ƒë·ªß</a>
                    </div>
                </div>
            </div>
            <div class="col-lg-5">
                <div class="card mb-3">
                    <div class="card-header custom-border-bottom">
                        <h5 class="card-title mb-0">L·ªõp h·ªçc s·∫Øp t·ªõi</h5>
                    </div>
                    <div class="card-body" id="upcomingClassesContainer">
                        <div id="loadingUpcoming" class="text-center py-3">
                            <div class="spinner-border spinner-border-sm text-primary" role="status">
                                <span class="visually-hidden">ƒêang t·∫£i...</span>
                            </div>
                            <span class="ms-2">ƒêang t·∫£i l·ªõp h·ªçc s·∫Øp t·ªõi...</span>
                        </div>
                        <div id="upcomingClasses"></div>
                    </div>
                </div>
                <div class="card mb-3">
                    <div class="card-header bg-light d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h5 class="card-title mb-0">G·ª£i √Ω t·ª´ AI</h5>
                        </div>
                    </div>
                    <div class="card-body" id="aiSuggestionContainer">
                        <div id="loadingSuggestion" class="text-center py-3">
                            <div class="spinner-border spinner-border-sm text-primary" role="status">
                                <span class="visually-hidden">ƒêang t·∫£i...</span>
                            </div>
                            <span class="ms-2">ƒêang t·∫°o g·ª£i √Ω t·ª´ AI...</span>
                        </div>
                        <div id="aiSuggestionsContent" class="d-none">
                        </div>
                    </div>
                </div>
                <div class="card">
                    <div class="card-header custom-border-bottom">
                        <h5 class="card-title mb-0">Tr√≤ chuy·ªán g·∫ßn ƒë√¢y v·ªõi AI</h5>
                    </div>
                    <div class="list-group list-group-flush" id="recentChatsContainer">
                        <div id="loadingChats" class="text-center py-3">
                            <div class="spinner-border spinner-border-sm text-primary" role="status">
                                <span class="visually-hidden">ƒêang t·∫£i...</span>
                            </div>
                            <span class="ms-2">ƒêang t·∫£i tr√≤ chuy·ªán g·∫ßn ƒë√¢y...</span>
                        </div>
                    </div>
                    <div class="card-footer bg-transparent">
                        <a href="/histories" class="btn btn-sm btn-link text-primary">Xem t·∫•t c·∫£ cu·ªôc tr√≤ chuy·ªán</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        let currentDate = new Date();
        let currentWeekStart = getWeekStart(currentDate);
        loadWeeklySchedule(currentWeekStart);
        loadUpcomingClasses();
        loadAiSuggestion();
        loadRecentChats();
        document.getElementById('prevWeekBtn').addEventListener('click', function () {
            currentWeekStart.setDate(currentWeekStart.getDate() - 7);
            loadWeeklySchedule(currentWeekStart);
        });

        document.getElementById('nextWeekBtn').addEventListener('click', function () {
            currentWeekStart.setDate(currentWeekStart.getDate() + 7);
            loadWeeklySchedule(currentWeekStart);
        });
        document.getElementById('addStudySessionBtn').addEventListener('click', function (e) {
        });
        function getWeekStart(date) {
            const result = new Date(date);
            const day = result.getDay();
            result.setDate(result.getDate() - day + (day === 0 ? -6 : 1)); 
            result.setHours(0, 0, 0, 0);
            return result;
        }

        function formatDate(date) {
            const options = { weekday: 'long', day: 'numeric', month: 'long' };
            return new Date(date).toLocaleDateString('vi-VN', options);
        }

        function formatTime(dateString) {
            return new Date(dateString).toLocaleTimeString('vi-VN', {
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        function formatTimeRange(start, end) {
            return `${formatTime(start)} - ${formatTime(end)}`;
        }

        function getEventColor(type) {
            const colorMap = {
                'study-session': 'primary',
                'assignment': 'info',
                'exam-prep': 'warning',
                'exam': 'danger',
                'group-study': 'success',
                'study-break': 'secondary'
            };
            return colorMap[type] || 'primary';
        }

        function getEventIcon(type) {
            const iconMap = {
                'study-session': 'fa-book',
                'assignment': 'fa-tasks',
                'exam-prep': 'fa-file-alt',
                'exam': 'fa-clipboard-check',
                'group-study': 'fa-users',
                'study-break': 'fa-coffee'
            };
            return iconMap[type] || 'fa-calendar';
        }

        function getEventTypeName(type) {
            const typeMap = {
                'study-session': 'Bu·ªïi h·ªçc',
                'assignment': 'B√†i t·∫≠p',
                'exam-prep': '√în thi',
                'exam': 'K·ª≥ thi',
                'group-study': 'H·ªçc nh√≥m',
                'study-break': 'Gi·∫£i lao'
            };
            return typeMap[type] || 'Bu·ªïi h·ªçc';
        }
        function loadWeeklySchedule(weekStart) {
            const weekEnd = new Date(weekStart);
            weekEnd.setDate(weekStart.getDate() + 6);
            document.getElementById('weeklySchedule').innerHTML = `
                <tr id="loadingSchedule">
                    <td colspan="2" class="text-center py-3">
                        <div class="spinner-border spinner-border-sm text-primary" role="status">
                            <span class="visually-hidden">ƒêang t·∫£i...</span>
                        </div>
                        <span class="ms-2">ƒêang t·∫£i l·ªãch h·ªçc...</span>
                    </td>
                </tr>
            `;
            fetch(`/api/calendar/events/range?start=${weekStart.toISOString()}&end=${weekEnd.toISOString()}`)
                .then(response => response.json())
                .then(events => {
                    const eventsByDay = {};
                    const dayNames = ['Ch·ªß nh·∫≠t', 'Th·ª© hai', 'Th·ª© ba', 'Th·ª© t∆∞', 'Th·ª© nƒÉm', 'Th·ª© s√°u', 'Th·ª© b·∫£y'];
                    dayNames.forEach(day => {
                        eventsByDay[day] = [];
                    });
                    events.forEach(event => {
                        const eventDate = new Date(event.start);
                        const dayName = dayNames[eventDate.getDay()];
                        eventsByDay[dayName].push(event);
                    });
                    let scheduleHtml = '';

                    dayNames.forEach((day, index) => {
                        if (index === 0) return;

                        const dayEvents = eventsByDay[day];
                        const currentDayDate = new Date(weekStart);
                        currentDayDate.setDate(weekStart.getDate() + (index === 0 ? 6 : index - 1));

                        scheduleHtml += `<tr>
                            <td width="100"><span class="fw-bold">${day}</span><br>
                                <small class="text-muted">${currentDayDate.toLocaleDateString('vi-VN', { day: 'numeric', month: 'numeric' })}</small>
                            </td>
                            <td>`;

                        if (dayEvents.length > 0) {
                            dayEvents.forEach(event => {
                                const colorClass = getEventColor(event.extendedProps?.type || 'study-session');
                                scheduleHtml += `
                                    <div class="d-flex align-items-center mb-2">
                                        <div class="flex-shrink-0 me-2">
                                            <span class="badge bg-soft-${colorClass} text-${colorClass}">${formatTimeRange(event.start, event.end || event.start)}</span>
                                        </div>
                                        <div class="flex-grow-1">
                                            <h6 class="mb-0">${event.title}</h6>
                                            <small class="text-muted">${event.extendedProps?.description || ''}</small>
                                        </div>
                                    </div>
                                `;
                            });
                        } else {
                            scheduleHtml += `<span class="text-muted">Kh√¥ng c√≥ s·ª± ki·ªán n√†o</span>`;
                        }

                        scheduleHtml += `</td></tr>`;
                    });

                    document.getElementById('weeklySchedule').innerHTML = scheduleHtml;
                })
                .catch(error => {
                    console.error('L·ªói khi t·∫£i l·ªãch h·ªçc h√†ng tu·∫ßn:', error);
                    document.getElementById('weeklySchedule').innerHTML = `
                        <tr>
                            <td colspan="2" class="text-center text-danger py-3">
                                <i class="fas fa-exclamation-circle me-2"></i>
                                Kh√¥ng th·ªÉ t·∫£i l·ªãch h·ªçc. Vui l√≤ng l√†m m·ªõi trang.
                            </td>
                        </tr>
                    `;
                });
        }

        function loadUpcomingClasses() {
            document.getElementById('loadingUpcoming').classList.remove('d-none');
            document.getElementById('upcomingClasses').innerHTML = '';
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            const endOfToday = new Date(today);
            endOfToday.setHours(23, 59, 59, 999);
            fetch(`/api/calendar/events/range?start=${today.toISOString()}&end=${endOfToday.toISOString()}`)
                .then(response => response.json())
                .then(events => {
                    document.getElementById('loadingUpcoming').classList.add('d-none');
                    events.sort((a, b) => new Date(a.start) - new Date(b.start));
                    const now = new Date();
                    const upcomingEvents = events.filter(event => new Date(event.end || event.start) > now);

                    if (upcomingEvents.length > 0) {
                        let upcomingHtml = '';

                        upcomingEvents.slice(0, 3).forEach((event, index) => {
                            const colorClass = getEventColor(event.extendedProps?.type || 'study-session');
                            const icon = getEventIcon(event.extendedProps?.type || 'study-session');
                            const borderClass = index < upcomingEvents.length - 1 ? 'border-bottom' : '';

                            upcomingHtml += `
                                <div class="d-flex align-items-center mb-3 pb-3 ${borderClass}">
                                    <div class="flex-shrink-0 me-3">
                                        <div class="avatar avatar-sm bg-soft-${colorClass} text-${colorClass} rounded">
                                            <span><i class="fas ${icon}"></i></span>
                                        </div>
                                    </div>
                                    <div class="flex-grow-1">
                                        <h6 class="mb-0">${event.title}</h6>
                                        <small class="text-muted">H√¥m nay, ${formatTimeRange(event.start, event.end || event.start)}</small>
                                    </div>
                                    <div class="flex-shrink-0">
                                        <a href="/calendar" class="btn btn-sm btn-${colorClass}">Xem</a>
                                    </div>
                                </div>
                            `;
                        });

                        document.getElementById('upcomingClasses').innerHTML = upcomingHtml;
                    } else {
                        document.getElementById('upcomingClasses').innerHTML = `
                            <div class="text-center text-muted pt-2">
                                <p>Kh√¥ng c√≥ l·ªõp h·ªçc n√†o s·∫Øp t·ªõi h√¥m nay</p>
                            </div>
                        `;
                    }
                })
                .catch(error => {
                    console.error('L·ªói khi t·∫£i l·ªõp h·ªçc s·∫Øp t·ªõi:', error);
                    document.getElementById('loadingUpcoming').classList.add('d-none');
                    document.getElementById('upcomingClasses').innerHTML = `
                        <div class="text-center text-danger py-3">
                            <i class="fas fa-exclamation-circle me-2"></i>
                            Kh√¥ng th·ªÉ t·∫£i l·ªõp h·ªçc s·∫Øp t·ªõi.
                        </div>
                    `;
                });
        }

        function loadAiSuggestion() {
            document.getElementById('loadingSuggestion').classList.remove('d-none');
            const suggestionsContent = document.getElementById('aiSuggestionsContent');
            if (suggestionsContent) {
                suggestionsContent.classList.add('d-none');
            }
            fetch('/api/ai/suggestions')
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`L·ªói HTTP! Tr·∫°ng th√°i: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    document.getElementById('loadingSuggestion').classList.add('d-none');

                    if (data.success && data.suggestions && data.suggestions.length > 0) {
                        const suggestionsContainer = document.getElementById('aiSuggestionsContent');
                        if (suggestionsContainer) {
                            suggestionsContainer.classList.remove('d-none');
                            suggestionsContainer.innerHTML = '';
                            data.suggestions.forEach((suggestion, index) => {
                                let priorityClass = '';
                                switch (suggestion.priority) {
                                    case 5: priorityClass = 'border-danger'; break;
                                    case 4: priorityClass = 'border-warning'; break;
                                    case 3: priorityClass = 'border-info'; break;
                                    default: priorityClass = 'border-light';
                                }

                                const suggestionEl = document.createElement('div');
                                suggestionEl.className = `suggestion-item mb-3 p-3 border ${priorityClass} rounded`;
                                suggestionEl.innerHTML = `
                                <div class="d-flex align-items-center mb-2">
                                    <div class="flex-grow-1">
                                        <h6 class="mb-0">${suggestion.title}</h6>
                                        <small class="text-muted">
                                            ${new Date(suggestion.start).toLocaleDateString('vi-VN')} ‚Ä¢ 
                                            ${formatTimeRange(suggestion.start, suggestion.end)}
                                        </small>
                                    </div>
                                    <div class="ms-2">
                                        <span class="badge bg-${getPriorityColor(suggestion.priority)}">
                                            ƒê·ªô ∆∞u ti√™n: ${suggestion.priority}/5
                                        </span>
                                    </div>
                                </div>
                                <p class="mb-2">${suggestion.text}</p>
                                <div class="d-flex justify-content-end">
                                    <button class="btn btn-sm btn-outline-secondary me-2 dismiss-suggestion-btn" 
                                        data-suggestion-id="${suggestion.id}">
                                        B·ªè qua
                                    </button>
                                    <button class="btn btn-sm btn-success add-suggestion-btn"
                                        data-suggestion-id="${suggestion.id}"
                                        data-title="${suggestion.title}"
                                        data-start="${suggestion.start}"
                                        data-end="${suggestion.end}"
                                        data-type="${suggestion.type}">
                                        <i class="fas fa-plus me-1"></i> Th√™m v√†o l·ªãch
                                    </button>
                                </div>
                            `;

                                suggestionsContainer.appendChild(suggestionEl);
                            });
                            document.querySelectorAll('.dismiss-suggestion-btn').forEach(btn => {
                                btn.addEventListener('click', handleDismissSuggestion);
                            });

                            document.querySelectorAll('.add-suggestion-btn').forEach(btn => {
                                btn.addEventListener('click', handleAddSuggestionToCalendar);
                            });
                        } else {
                            document.getElementById('aiSuggestionContainer').innerHTML = `
                                <p class="text-muted text-center">Kh√¥ng c√≥ g·ª£i √Ω n√†o v√†o l√∫c n√†y.</p>
                            `;
                        }
                    } else if (data.success && data.suggestion) {
                        const container = document.getElementById('aiSuggestionContainer');
                        container.innerHTML = `
                            <div class="suggestion-item mb-3 p-3 border border-info rounded">
                                <div class="d-flex align-items-center mb-2">
                                    <div class="flex-grow-1">
                                        <h6 class="mb-0">${data.suggestion.title}</h6>
                                        <small class="text-muted">
                                            ${new Date(data.suggestion.start).toLocaleDateString('vi-VN')} ‚Ä¢ 
                                            ${formatTimeRange(data.suggestion.start, data.suggestion.end)}
                                        </small>
                                    </div>
                                </div>
                                <p class="mb-2">${data.suggestion.text}</p>
                                <div class="d-flex justify-content-end">
                                    <button class="btn btn-sm btn-outline-secondary me-2" id="dismissSuggestionBtn" 
                                        data-suggestion-id="${data.suggestion.id}">
                                        B·ªè qua
                                    </button>
                                    <button class="btn btn-sm btn-success" id="addSuggestionBtn"
                                        data-suggestion-id="${data.suggestion.id}"
                                        data-title="${data.suggestion.title}"
                                        data-start="${data.suggestion.start}"
                                        data-end="${data.suggestion.end}"
                                        data-type="${data.suggestion.type}">
                                        <i class="fas fa-plus me-1"></i> Th√™m v√†o l·ªãch
                                    </button>
                                </div>
                            </div>
                        `;
                        document.getElementById('dismissSuggestionBtn').addEventListener('click', function() {
                            fetch('/api/ai/suggestions/dismiss', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ suggestionId: this.dataset.suggestionId })
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    container.innerHTML = '<p class="text-muted text-center">Kh√¥ng c√≥ g·ª£i √Ω n√†o v√†o l√∫c n√†y.</p>';
                                }
                            })
                            .catch(error => console.error('L·ªói khi b·ªè qua g·ª£i √Ω:', error));
                        });
                        
                        document.getElementById('addSuggestionBtn').addEventListener('click', function() {
                            const suggestionData = {
                                id: this.dataset.suggestionId,
                                title: this.dataset.title,
                                start: this.dataset.start,
                                end: this.dataset.end,
                                type: this.dataset.type
                            };
                            
                            fetch('/api/ai/suggestions/add-to-calendar', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify(suggestionData)
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    container.innerHTML = '<div class="alert alert-success">ƒê√£ th√™m bu·ªïi h·ªçc v√†o l·ªãch th√†nh c√¥ng!</div>';
                                    loadUpcomingClasses();
                                    
                                    setTimeout(() => {
                                        container.innerHTML = '<p class="text-muted text-center">Kh√¥ng c√≥ g·ª£i √Ω n√†o v√†o l√∫c n√†y.</p>';
                                    }, 3000);
                                }
                            })
                            .catch(error => console.error('L·ªói khi th√™m g·ª£i √Ω v√†o l·ªãch:', error));
                        });
                    } else {
                        document.getElementById('aiSuggestionContainer').innerHTML = `
                            <p class="text-muted text-center">Kh√¥ng c√≥ g·ª£i √Ω n√†o v√†o l√∫c n√†y.</p>
                        `;
                    }
                })
                .catch(error => {
                    console.error('L·ªói khi t·∫£i g·ª£i √Ω AI:', error);
                    document.getElementById('loadingSuggestion').classList.add('d-none');
                    document.getElementById('aiSuggestionContainer').innerHTML = `
                        <div class="text-center text-danger py-2">
                            <i class="fas fa-exclamation-circle me-2"></i>
                            Kh√¥ng th·ªÉ t·∫£i g·ª£i √Ω AI: ${error.message}
                        </div>
                    `;
                });
        }
        
        function loadRecentChats() {
            const loadingChats = document.getElementById('loadingChats');
            if (loadingChats) {
                loadingChats.classList.remove('d-none');
            }
            fetch('/api/ai/chats?limit=3')
                .then(response => response.json())
                .then(data => {
                    const loadingElement = document.getElementById('loadingChats');
                    if (loadingElement) {
                        loadingElement.remove();
                    }

                    const container = document.getElementById('recentChatsContainer');
                    if (!container) return;

                    if (data.success && data.data && data.data.length > 0) {
                        let chatsHtml = '';

                        data.data.forEach(chat => {
                            const createdAt = new Date(chat.createdAt);
                            const timeAgo = getTimeAgo(createdAt);

                            chatsHtml += `
                                <a href="/history/${chat._id}" class="list-group-item list-group-item-action">
                                    <div class="d-flex w-100 justify-content-between">
                                        <h6 class="mb-1">${chat.title}</h6>
                                        <small>${timeAgo}</small>
                                    </div>
                                    <p class="mb-1 text-muted text-truncate">
                                        ${chat.messages && chat.messages[0] ? chat.messages[0].content.substring(0, 60) + '...' : 'Kh√¥ng c√≥ tin nh·∫Øn'}
                                    </p>
                                </a>
                            `;
                        });

                        container.innerHTML = chatsHtml;
                    } else {
                        container.innerHTML = `
                            <div class="list-group-item text-center py-3">
                                <p class="text-muted mb-0">Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán g·∫ßn ƒë√¢y.</p>
                                <a href="/ai-chat" class="btn btn-sm btn-primary mt-2">B·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán m·ªõi</a>
                            </div>
                        `;
                    }
                })
                .catch(error => {
                    console.error('L·ªói khi t·∫£i tr√≤ chuy·ªán g·∫ßn ƒë√¢y:', error);
                    const loadingElement = document.getElementById('loadingChats');
                    if (loadingElement) {
                        loadingElement.remove();
                    }

                    const container = document.getElementById('recentChatsContainer');
                    if (container) {
                        container.innerHTML = `
                            <div class="list-group-item text-center text-danger py-3">
                                <i class="fas fa-exclamation-circle me-2"></i>
                                Kh√¥ng th·ªÉ t·∫£i tr√≤ chuy·ªán g·∫ßn ƒë√¢y.
                            </div>
                        `;
                    }
                });
        }

        function handleDismissSuggestion() {
            const suggestionId = this.dataset.suggestionId;
            const suggestionItem = this.closest('.suggestion-item');

            fetch('/api/ai/suggestions/dismiss', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ suggestionId })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        suggestionItem.style.height = suggestionItem.offsetHeight + 'px';
                        suggestionItem.style.opacity = '0';
                        suggestionItem.style.transition = 'all 0.3s ease-out';

                        setTimeout(() => {
                            suggestionItem.style.height = '0px';
                            suggestionItem.style.padding = '0px';
                            suggestionItem.style.margin = '0px';
                            suggestionItem.style.overflow = 'hidden';

                            setTimeout(() => {
                                suggestionItem.remove();
                                if (document.querySelectorAll('.suggestion-item').length === 0) {
                                    const suggestionsContent = document.getElementById('aiSuggestionsContent');
                                    if (suggestionsContent) {
                                        suggestionsContent.classList.add('d-none');
                                    }
                                    
                                    const container = document.getElementById('aiSuggestionContainer');
                                    if (container) {
                                        container.innerHTML = `
                                            <p class="text-muted text-center">Kh√¥ng c√≤n g·ª£i √Ω n√†o v√†o l√∫c n√†y.</p>
                                        `;
                                    }
                                }
                            }, 300);
                        }, 100);
                    }
                })
                .catch(error => console.error('L·ªói khi b·ªè qua g·ª£i √Ω:', error));
        }
    
        function handleAddSuggestionToCalendar() {
            const suggestionData = {
                id: this.dataset.suggestionId,
                title: this.dataset.title,
                start: this.dataset.start,
                end: this.dataset.end,
                type: this.dataset.type
            };

            const suggestionItem = this.closest('.suggestion-item');
            fetch('/api/ai/suggestions/add-to-calendar', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(suggestionData)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        suggestionItem.innerHTML = `
                            <div class="alert alert-success mb-0">
                                <i class="fas fa-check-circle me-2"></i> 
                                ƒê√£ th√™m bu·ªïi h·ªçc v√†o l·ªãch th√†nh c√¥ng!
                            </div>
                        `;
                        loadUpcomingClasses();
                        setTimeout(() => {
                            suggestionItem.style.height = suggestionItem.offsetHeight + 'px';
                            suggestionItem.style.opacity = '0';
                            suggestionItem.style.transition = 'all 0.3s ease-out';

                            setTimeout(() => {
                                suggestionItem.style.height = '0px';
                                suggestionItem.style.padding = '0px';
                                suggestionItem.style.margin = '0px';
                                suggestionItem.style.overflow = 'hidden';

                                setTimeout(() => {
                                    suggestionItem.remove();
                                    if (document.querySelectorAll('.suggestion-item').length === 0) {
                                        const suggestionsContent = document.getElementById('aiSuggestionsContent');
                                        if (suggestionsContent) {
                                            suggestionsContent.classList.add('d-none');
                                        }
                                        
                                        const container = document.getElementById('aiSuggestionContainer');
                                        if (container) {
                                            container.innerHTML = `
                                                <p class="text-muted text-center">Kh√¥ng c√≤n g·ª£i √Ω n√†o v√†o l√∫c n√†y.</p>
                                            `;
                                        }
                                    }
                                }, 300);
                            }, 2000);
                        }, 1000);
                    }
                })
                .catch(error => console.error('L·ªói khi th√™m g·ª£i √Ω v√†o l·ªãch:', error));
        }
        function getPriorityColor(priority) {
            switch (priority) {
                case 5: return 'danger';
                case 4: return 'warning';
                case 3: return 'info';
                case 2: return 'secondary';
                case 1: return 'light';
                default: return 'secondary';
            }
        }
        
        function getTimeAgo(date) {
            const seconds = Math.floor((new Date() - date) / 1000);

            let interval = Math.floor(seconds / 31536000);
            if (interval > 1) return interval + ' nƒÉm tr∆∞·ªõc';
            if (interval === 1) return '1 nƒÉm tr∆∞·ªõc';

            interval = Math.floor(seconds / 2592000);
            if (interval > 1) return interval + ' th√°ng tr∆∞·ªõc';
            if (interval === 1) return '1 th√°ng tr∆∞·ªõc';

            interval = Math.floor(seconds / 86400);
            if (interval > 1) return interval + ' ng√†y tr∆∞·ªõc';
            if (interval === 1) return '1 ng√†y tr∆∞·ªõc';

            interval = Math.floor(seconds / 3600);
            if (interval > 1) return interval + ' gi·ªù tr∆∞·ªõc';
            if (interval === 1) return '1 gi·ªù tr∆∞·ªõc';

            interval = Math.floor(seconds / 60);
            if (interval > 1) return interval + ' ph√∫t tr∆∞·ªõc';
            if (interval === 1) return '1 ph√∫t tr∆∞·ªõc';

            return 'v·ª´a m·ªõi ƒë√¢y';
        }
    });
</script>